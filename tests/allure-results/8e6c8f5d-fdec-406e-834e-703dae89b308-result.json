{"name": "test_slide_main_page_pictures[firefox]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Failed to convert data to an object", "trace": "browser = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"05a833ce-73bd-43a4-b2dc-3a58e004a248\")>\n\n    @allure.story('Проверка смены картинок в слайдере')\n    @pytest.mark.parametrize(\"browser\", [\"firefox\", \"chrome\"], indirect=True)\n    def test_slide_main_page_pictures(browser):\n        main_page = MainPage(browser)\n        product_page = ProductPage(browser)\n    \n        main_page.open_url()\n        main_page.click_on_mac_book_product()\n>       product_page.click_on_main_picture()\n\ntest_slider.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\product_page.py:37: in click_on_main_picture\n    self.find_element(self.product_page_main_picture)\n..\\pages\\base_page.py:41: in find_element\n    return WebDriverWait(self.browser, timeout).until(EC.presence_of_element_located(locator))\n..\\env\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:86: in until\n    value = method(self._driver)\n..\\env\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:81: in _predicate\n    return driver.find_element(*locator)\n..\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:738: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000218BB6B29D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Failed to convert data to an object\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Failed to convert data to an object\n\n..\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "steps": [{"name": "Открытие страницы «https://demo.opencart.com/»", "status": "passed", "start": 1711383544170, "stop": 1711383544913}, {"name": "Поиск элемента «('xpath', \"//img[@title='MacBook']//parent::a\")»", "status": "passed", "start": 1711383544913, "stop": 1711383544924}, {"name": "Клик по элементу «('xpath', \"//img[@title='MacBook']//parent::a\")»", "status": "passed", "start": 1711383544924, "stop": 1711383545156}, {"name": "Поиск элемента «('xpath', \"//img[@title='MacBook']//parent::a\")»", "status": "passed", "start": 1711383545156, "stop": 1711383547579}, {"name": "Клик по элементу «('xpath', \"//img[@title='MacBook']//parent::a\")»", "status": "passed", "start": 1711383547579, "stop": 1711383547879}, {"name": "Проверка URL, содержащего «https://demo.opencart.com/image/cache/catalog/demo/macbook_1-800x800.jpg»", "status": "passed", "start": 1711383547879, "stop": 1711383547881}, {"name": "Проверка видимости элемента «('xpath', \"//body/img[contains(@src, 'macbook_1')]\")»", "status": "passed", "start": 1711383547881, "stop": 1711383549750}, {"name": "Возврат на предыдущую страницу", "status": "passed", "start": 1711383549750, "stop": 1711383549823}, {"name": "Поиск элемента «('xpath', \"//img[@title='MacBook']//parent::a\")»", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Failed to convert data to an object\n\n", "trace": "  File \"C:\\PycharmProjects\\selenium-main-2\\pages\\base_page.py\", line 41, in find_element\n    return WebDriverWait(self.browser, timeout).until(EC.presence_of_element_located(locator))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\PycharmProjects\\selenium-main-2\\env\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 86, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\PycharmProjects\\selenium-main-2\\env\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 81, in _predicate\n    return driver.find_element(*locator)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\PycharmProjects\\selenium-main-2\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 738, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\PycharmProjects\\selenium-main-2\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\PycharmProjects\\selenium-main-2\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1711383549823, "stop": 1711383556369}], "attachments": [{"name": "log", "source": "c07f7060-3da6-4805-888f-c170b7a8cedc-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "browser", "value": "'firefox'"}], "start": 1711383544078, "stop": 1711383556400, "uuid": "2f6e75cf-9bfb-4e51-ba2a-888cbb64f16b", "historyId": "8d4d3b6917cc37e060a69c142659dc58", "testCaseId": "2bbf5867932fc373a5b588bdab836aae", "fullName": "tests.test_slider#test_slide_main_page_pictures", "labels": [{"name": "story", "value": "Проверка смены картинок в слайдере"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_slider"}, {"name": "host", "value": "DESKTOP-BLGDRF0"}, {"name": "thread", "value": "5556-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_slider"}]}