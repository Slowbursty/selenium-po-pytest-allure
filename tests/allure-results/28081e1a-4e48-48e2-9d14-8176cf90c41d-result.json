{"name": "test_add_htc_to_cart[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (381, 1187)\n  (Session info: chrome=123.0.6312.58)\nStacktrace:\n\tGetHandleVerifier [0x00007FF798967062+63090]\n\t(No symbol) [0x00007FF7988D2CB2]\n\t(No symbol) [0x00007FF79876EC65]\n\t(No symbol) [0x00007FF7987BBB34]\n\t(No symbol) [0x00007FF7987B9954]\n\t(No symbol) [0x00007FF7987B7164]\n\t(No symbol) [0x00007FF7987B5EF9]\n\t(No symbol) [0x00007FF7987AA708]\n\t(No symbol) [0x00007FF7987D6FDA]\n\t(No symbol) [0x00007FF7987AA00A]\n\t(No symbol) [0x00007FF7987D71F0]\n\t(No symbol) [0x00007FF7987F3412]\n\t(No symbol) [0x00007FF7987D6D83]\n\t(No symbol) [0x00007FF7987A83A8]\n\t(No symbol) [0x00007FF7987A9441]\n\tGetHandleVerifier [0x00007FF798D625CD+4238301]\n\tGetHandleVerifier [0x00007FF798D9F72D+4488509]\n\tGetHandleVerifier [0x00007FF798D97A0F+4456479]\n\tGetHandleVerifier [0x00007FF798A405A6+953270]\n\t(No symbol) [0x00007FF7988DE57F]\n\t(No symbol) [0x00007FF7988D9254]\n\t(No symbol) [0x00007FF7988D938B]\n\t(No symbol) [0x00007FF7988C9BC4]\n\tBaseThreadInitThunk [0x00007FF809647344+20]\n\tRtlUserThreadStart [0x00007FF80AAE26B1+33]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fe046b13f445026cc75b72f5647a1998\")>\n\n    @allure.story('Проверка написания отзыва для товара HTC')\n    @pytest.mark.parametrize(\"browser\", [\"firefox\", \"chrome\"], indirect=True)\n    def test_add_htc_to_cart(browser):\n        main_page = MainPage(browser)\n        phones_and_pda_page = PhonesAndPdaPage(browser)\n        product_page = ProductPage(browser)\n    \n        main_page.open_url()\n        main_page.click_on_phones_and_pda()\n        phones_and_pda_page.click_on_htc_touch_hd()\n        product_page.click_on_review()\n>       product_page.fill_review_form()\n\ntest_write_review_htc.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\product_page.py:70: in fill_review_form\n    self.click_on(self.reviewer_rating_star_3)\n..\\pages\\base_page.py:67: in click_on\n    return element.click()\n..\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n..\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000260705DC190>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF7988C9BC4]\\\\n\\\\tBaseThreadInitThunk [0x00007FF809647344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF80AAE26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (381, 1187)\nE         (Session info: chrome=123.0.6312.58)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF798967062+63090]\nE       \t(No symbol) [0x00007FF7988D2CB2]\nE       \t(No symbol) [0x00007FF79876EC65]\nE       \t(No symbol) [0x00007FF7987BBB34]\nE       \t(No symbol) [0x00007FF7987B9954]\nE       \t(No symbol) [0x00007FF7987B7164]\nE       \t(No symbol) [0x00007FF7987B5EF9]\nE       \t(No symbol) [0x00007FF7987AA708]\nE       \t(No symbol) [0x00007FF7987D6FDA]\nE       \t(No symbol) [0x00007FF7987AA00A]\nE       \t(No symbol) [0x00007FF7987D71F0]\nE       \t(No symbol) [0x00007FF7987F3412]\nE       \t(No symbol) [0x00007FF7987D6D83]\nE       \t(No symbol) [0x00007FF7987A83A8]\nE       \t(No symbol) [0x00007FF7987A9441]\nE       \tGetHandleVerifier [0x00007FF798D625CD+4238301]\nE       \tGetHandleVerifier [0x00007FF798D9F72D+4488509]\nE       \tGetHandleVerifier [0x00007FF798D97A0F+4456479]\nE       \tGetHandleVerifier [0x00007FF798A405A6+953270]\nE       \t(No symbol) [0x00007FF7988DE57F]\nE       \t(No symbol) [0x00007FF7988D9254]\nE       \t(No symbol) [0x00007FF7988D938B]\nE       \t(No symbol) [0x00007FF7988C9BC4]\nE       \tBaseThreadInitThunk [0x00007FF809647344+20]\nE       \tRtlUserThreadStart [0x00007FF80AAE26B1+33]\n\n..\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "Открытие страницы «https://demo.opencart.com/»", "status": "passed", "start": 1711383724759, "stop": 1711383725160}, {"name": "Поиск элемента «('xpath', \"//a[text()='Phones & PDAs']\")»", "status": "passed", "start": 1711383725160, "stop": 1711383732043}, {"name": "Клик по элементу «('xpath', \"//a[text()='Phones & PDAs']\")»", "status": "passed", "start": 1711383732043, "stop": 1711383732373}, {"name": "Поиск элемента «('xpath', \"//a[text()='HTC Touch HD']\")»", "status": "passed", "start": 1711383732373, "stop": 1711383744206}, {"name": "Клик по элементу «('xpath', \"//a[text()='HTC Touch HD']\")»", "status": "passed", "start": 1711383744206, "stop": 1711383744666}, {"name": "Поиск элемента «('xpath', \"//a[contains(text(), 'Reviews')]\")»", "status": "passed", "start": 1711383744666, "stop": 1711383744677}, {"name": "Клик по элементу «('xpath', \"//a[contains(text(), 'Reviews')]\")»", "status": "passed", "start": 1711383744677, "stop": 1711383744732}, {"name": "Ввод текста «DemoReviewer»", "status": "passed", "steps": [{"name": "Поиск элемента «('xpath', \"//input[@id='input-name']\")»", "status": "passed", "start": 1711383744733, "stop": 1711383744743}], "start": 1711383744733, "stop": 1711383744946}, {"name": "Ввод текста «Now partner stuff phone work. Around course field behavior hope night.»", "status": "passed", "steps": [{"name": "Поиск элемента «('xpath', \"//textarea[@id='input-text']\")»", "status": "passed", "start": 1711383744947, "stop": 1711383744959}], "start": 1711383744947, "stop": 1711383745029}, {"name": "Клик по элементу «('xpath', \"//input[@value='3']\")»", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (381, 1187)\n  (Session info: chrome=123.0.6312.58)\nStacktrace:\n\tGetHandleVerifier [0x00007FF798967062+63090]\n\t(No symbol) [0x00007FF7988D2CB2]\n\t(No symbol) [0x00007FF79876EC65]\n\t(No symbol) [0x00007FF7987BBB34]\n\t(No symbol) [0x00007FF7987B9954]\n\t(No symbol) [0x00007FF7987B7164]\n\t(No symbol) [0x00007FF7987B5EF9]\n\t(No symbol) [0x00007FF7987AA708]\n\t(No symbol) [0x00007FF7987D6FDA]\n\t(No symbol) [0x00007FF7987AA00A]\n\t(No symbol) [0x00007FF7987D71F0]\n\t(No symbol) [0x00007FF7987F3412]\n\t(No symbol) [0x00007FF7987D6D83]\n\t(No symbol) [0x00007FF7987A83A8]\n\t(No symbol) [0x00007FF7987A9441]\n\tGetHandleVerifier [0x00007FF798D625CD+4238301]\n\tGetHandleVerifier [0x00007FF798D9F72D+4488509]\n\tGetHandleVerifier [0x00007FF798D97A0F+4456479]\n\tGetHandleVerifier [0x00007FF798A405A6+953270]\n\t(No symbol) [0x00007FF7988DE57F]\n\t(No symbol) [0x00007FF7988D9254]\n\t(No symbol) [0x00007FF7988D938B]\n\t(No symbol) [0x00007FF7988C9BC4]\n\tBaseThreadInitThunk [0x00007FF809647344+20]\n\tRtlUserThreadStart [0x00007FF80AAE26B1+33]\n\n", "trace": "  File \"C:\\PycharmProjects\\selenium-main-2\\pages\\base_page.py\", line 67, in click_on\n    return element.click()\n           ^^^^^^^^^^^^^^^\n  File \"C:\\PycharmProjects\\selenium-main-2\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\PycharmProjects\\selenium-main-2\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\PycharmProjects\\selenium-main-2\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\PycharmProjects\\selenium-main-2\\env\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1711383745029, "stop": 1711383746114}], "attachments": [{"name": "log", "source": "edfc8e7d-5921-4bc8-96d9-f9c60ea1b20d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "browser", "value": "'chrome'"}], "start": 1711383724667, "stop": 1711383746162, "uuid": "2f3d5498-fd2b-45dc-8e92-a5071f04a85f", "historyId": "2b2172082e35d5a996cd101cde161f4d", "testCaseId": "2f003d08c0dde928bbffac3b363911f2", "fullName": "tests.test_write_review_htc#test_add_htc_to_cart", "labels": [{"name": "story", "value": "Проверка написания отзыва для товара HTC"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_write_review_htc"}, {"name": "host", "value": "DESKTOP-BLGDRF0"}, {"name": "thread", "value": "7064-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_write_review_htc"}]}